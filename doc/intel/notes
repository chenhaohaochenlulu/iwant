

8.4.1 BSP and AP Processors
The MP initialization protocol defines two classes of processors: the bootstrap processor (BSP) and the application processors (APs).

Following a power-up or RESET of an MP system, system hardware dynamically selects one of the processors on the system bus as the BSP. 
The remaining processors are designated as APs.

As part of the BSP selection mechanism, the BSP flag is set in the IA32_APIC_BASE MSR (see Figure 10-5) of the BSP, indicating that it is the BSP. 
This flag is cleared for all other processors.

The BSP executes the BIOSs boot-strap code to configure the APIC environment, 
sets up system-wide data structures, and starts and initializes the APs.
 When the BSP and APs are initialized, the BSP then begins executing the operating-system initialization code.

Following a power-up or reset, the APs complete a minimal self-configuration, then wait for a startup signal (a SIPI message) from the BSP processor. 
Upon receiving a SIPI message, an AP executes the BIOS AP configuration code, which ends with the AP being placed in halt state.

For Intel 64 and IA-32 processors supporting Intel Hyper-Threading Technology, the MP initialization protocol treats
each of the logical processors on the system bus or coherent link domain as a separate processor (with a uniqueAPIC ID). 
During boot-up, one of the logical processors is selected as the BSP and the remainder of the logical processors are designated as APs.


8.4.3 MP Initialization Protocol Algorithm for MP Systems

1. Each logical processor is assigned a unique APIC ID, based on system topology. The unique ID is a 32-bit value
if the processor supports CPUID leaf 0BH, otherwise the unique ID is an 8-bit value. (see Section 8.4.5, “IdentifyingLogical Processors in an MP System”).

2. Each logical processor is assigned a unique arbitration priority based on its APIC ID.

3. Each logical processor executes its internal BIST simultaneously with the other logical processors in the system.

4. Upon completion of the BIST, the logical processors use a hardware-defined selection mechanism to select the BSP and the APs from the available logical processors on the system bus.
depending on the family, model, and stepping IDs of the processors, as follows:

— Later generations of IA processors within family 0FH (see Section 8.4), IA processors with system bus
    (family=06H, extended_model=0, model>=0EH), or all other modern Intel processors (family=06H, extended_model>0):
• The logical processors begin monitoring the BNR# signal, which is toggling. When the BNR# pin stops toggling, each processor attempts to issue a NOP special cycle on the system bus.
• The logical processor with the highest arbitration priority succeeds in issuing a NOP special cycle and is nominated the BSP. 
  This processor sets the BSP flag in its IA32_APIC_BASE MSR, then fetches and begins executing BIOS boot-strap code, beginning at the reset vector (physical address FFFF FFF0H).
• The remaining logical processors (that failed in issuing a NOP special cycle) are designated as APs. They leave their BSP flags in the clear state and enter a “wait-for-SIPI state.”

5. As part of the boot-strap code, the BSP creates an ACPI table and/or an MP table and adds its initial APIC ID to these tables as appropriate.

6. At the end of the boot-strap procedure, the BSP sets a processor counter to 1, then broadcasts a SIPI message to all the APs in the system. 
   Here, the SIPI message contains a vector to the BIOS AP initialization code (at000VV000H, where VV is the vector contained in the SIPI message).

7. The first action of the AP initialization code is to set up a race (among the APs) to a BIOS initialization semaphore. 
  The first AP to the semaphore begins executing the initialization code. (See Section 8.4.4, “MP Initialization Example,” for semaphore implementation details.) 
  As part of the AP initialization procedure, the AP adds its APIC ID number to the ACPI and/or MP tables as appropriate and increments the processor counter by 1. 
  At the completion of the initialization procedure, the AP executes a CLI instruction and halts itself.

8. When each of the APs has gained access to the semaphore and executed the AP initialization code, the BSP
establishes a count for the number of processors connected to the system bus, completes executing the BIOS
boot-strap code, and then begins executing operating-system boot-strap and start-up code.

9. While the BSP is executing operating-system boot-strap and start-up code, the APs remain in the halted state.
In this state they will respond only to INITs, NMIs, and SMIs. They will also respond to snoops and to assertions of the STPCLK# pin.


8.4.4.1 Typical BSP Initialization Sequence

After the BSP and APs have been selected (by means of a hardware protocol, see Section 8.4.3, “MP Initialization
Protocol Algorithm for MP Systems”), the BSP begins executing BIOS boot-strap code (POST) at the normal IA-32
architecture starting address (FFFF FFF0H). The boot-strap code typically performs the following operations:

1. Initializes memory.
2. Loads the microcode update into the processor.
3. Initializes the MTRRs.
4. Enables the caches.

... ...


8.4.5 Identifying Logical Processors in an MP System
Read ACPI or MP table — As part of the MP initialization protocol, the BIOS creates an ACPI table and an MP table.



9.1.2 Processor Built-In Self-Test (BIST)
Hardware may request that the BIST be performed at power-up. 
The EAX register is cleared (0H) if the processor passes the BIST. 
A nonzero value in the EAX register after the BIST indicates that a processor fault was detected.
If the BIST is not requested, the contents of the EAX register after a hardware reset is 0H.
The overhead for performing a BIST varies between processor families. 
For example, the BIST takes approximately 30 million processor clock periods to execute on the Pentium 4 processor. 
This clock count is model-specific; Intel reserves the right to change the number of periods for any Intel 64 or IA-32 processor, without notification.

9.1.3 Model and Stepping Information
Following a hardware reset, the EDX register contains component identification and revision information (seeFigure 9-2). 
For example, the model, family, and processor type returned for the first processor in the Intel
Pentium 4 family is as follows: model (0000B), family (1111B), and processor type (00B)

9.1.4 First Instruction Executed
The first instruction that is fetched and executed following a hardware reset is located at physical addres FFFFFFF0H. 
This address is 16 bytes below the processor’s uppermost physical address. The EPROM containing the software-initialization code must be located at this address.
The address FFFFFFF0H is beyond the 1-MByte addressable range of the processor while in real-address mode. 
The processor is initialized to this starting address as follows. 

The CS register has two parts: the visible segment selector part and the hidden base address part. 
In real-address mode, the base address is normally formed by hifting the 16-bit segment selector value 4 bits to the left to produce a 20-bit base address. 

However, during a hardware reset, the segment selector in the CS register is loaded with F000H and the base address is loaded with FFFF0000H. 
The starting address is thus formed by adding the base address to the value in the EIP register (thatis, FFFF0000 + FFF0H = FFFFFFF0H).
The first time the CS register is loaded with a new value after a hardware reset, the processor will follow the normal
rule for address translation in real-address mode (that is, [CS base address = CS segment selector * 16]). To
insure that the base address in the CS register remains unchanged until the EPROM based software-initialization  
code is completed, the code must not contain a far jump or far call or allow an interrupt to occur (which would  cause the CS selector value to be changed).



11.3 METHODS OF CACHING AVAILABLE
The processor allows any area of system memory to be cached in the L1, L2, and L3 caches.
 In individual pages or regions of system memory, it allows the type of caching (also called memory type) to be specified (see Section11.5). 
Memory types currently defined for the Intel 64 and IA-32 architectures are (see Table 11-2):
• Strong Uncacheable (UC) —System memory locations are not cached.

• Uncacheable (UC-) — Has same characteristics as the strong uncacheable (UC) memory type, except that
this memory type can be overridden by programming the MTRRs for the WC memory type.

• Write Combining (WC) — System memory locations are not cached (as with uncacheable memory) and
coherency is not enforced by the processor’s bus coherency protocol.

• Write-through (WT) — Writes and reads to and from system memory are cached.

• Write-back (WB) — Writes and reads to and from system memory are cached.

• Write protected (WP) — Reads come from cache lines when possible, and read misses cause cache fills.


11.11 MEMORY TYPE RANGE REGISTERS (MTRRS)
The following section pertains only to the P6 and more recent processor families.
The memory type range registers (MTRRs) provide a mechanism for associating the memory types (see Section11.3, “Methods of Caching Available”) 
with physical-address ranges in system memory. 
They allow the processor to optimize operations for different types of memory such as RAM, ROM, frame-buffer memory, and memory-mapped I/O devices.

They also simplify system hardware design by eliminating the memory control pins used for this function on earlier IA-32 processors and the external logic needed to drive them.

The MTRR mechanism allows up to 96 memory ranges to be defined in physical memory, and it defines a set of
model-specific registers (MSRs) for specifying the type of memory that is contained in each range. 

Table 11-8 shows the memory types that can be specified and their properties; 
Figure 11-4 shows the mapping of physical  memory with MTRRs. 
See Section 11.3, “Methods of Caching Available,” for a more detailed description of each memory type.


Table 11-8. Memory Types That Can Be Encoded in MTRRs
Memory                                     Type and Mnemonic Encoding in MTRR
Uncacheable (UC)                                00H
Write Combining (WC)                        01H
Reserved*                                              02H
Reserved*                                              03H
Write-through (WT)                            04H
Write-protected (WP)                          05H
Writeback (WB)                                   06H
Reserved*                                             07H through FFH


34.2 SYSTEM MANAGEMENT INTERRUPT (SMI)
The only way to enter SMM is by signaling an SMI through the SMI# pin on the processor or through an SMImessage received through the APIC bus.


34.3.1 Entering SMM :
The processor always handles an SMI on an architecturally defined “interruptible” point in program execution


34.3.2 Exiting From SMM  
The only way to exit SMM is to execute the RSM instruction. 
The RSM instruction is only available to the SMI handler; if the processor is not in SMM, attempts to execute the RSM instruction result in an invalid-opcode exception(#UD) being generated.


34.4 SMRAM
Upon entering SMM, the processor switches to a new address space.
The default SMRAM size is 64 KBytes beginning at a base physical address in physical memory called the SMBASE
The SMBASE default value following a hardware reset is 30000H.
The processor looks for the first instruction of the SMI handler at the address [SMBASE + 8000H].
 It stores the processors state in the area from [SMBASE + FE00H] to [SMBASE + FFFFH]. 


The location of the SMRAM can be changed by changing the SMBASE value . (SMBASE Field (Doubleword)) SMBASE + 8000H+ 7EF8H
It should be noted that all processors in a multiple-processor system are initialized with the same SMBASE value (30000H). 
Initialization software must sequentially place each processor in SMM and change its SMBASE so that it does not overlap those of other processors.


34.4.1.1 SMRAM State Save Map and Intel 64 Architecture
The state save area on an Intel 64 processor at [SMBASE + 8000H + 7FFFH] and extends to [SMBASE + 8000H + 7C00H].



34.11 SMBASE RELOCATION
The default base address for the SMRAM is 30000H. This value is contained in an internal processor register called the SMBASE register. 
The operating system or executive can relocate the SMRAM by setting the SMBASE field in the saved state map (at offset 7EF8H) to a new value (see Figure 34-4). 
The RSM instruction reloads the internal SMBASE register with the value in the SMBASE field each time it exits SMM. 
All subsequent SMI requests will use the new SMBASE value to find the starting address for the SMI handler (at SMBASE + 8000H) 
and the SMRAM state save area (from SMBASE + FE00H to SMBASE + FFFFH). 
(The processor resets the value in its internal SMBASE register to 30000H on a RESET, but does not change it on an INIT.)


34.13 SMM MULTIPLE-PROCESSOR CONSIDERATIONS

• Any processor in a multiprocessor system can respond to an SMM.
• Each processor needs its own SMRAM space. This space can be in system memory or in a separate RAM.
• The SMRAMs for different processors can be overlapped in the same memory space.
• The SMI handler will need to initialize the SMBASE for each processor.
• Processors can respond to local SMIs through their SMI# pins or to SMIs received through the APIC interface.
The APIC interface can distribute SMIs to different processors.
• Two or more processors can be executing in SMM at the same time.